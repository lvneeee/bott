const { SlashCommandBuilder } = require('discord.js');
const { searchVideos } = require('../utils/ytdlp');
const { execute: playExecute } = require('./play');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('search')
    .setDescription('T√¨m v√† ph√°t video t·ª´ YouTube')
    .addStringOption(option =>
      option
        .setName('query')
        .setDescription('T·ª´ kh√≥a t√¨m ki·∫øm')
        .setRequired(true)
    ),
  async execute(interaction) {
    // Immediately defer the reply to prevent timeout
    await interaction.deferReply().catch(error => {
      if (error.code === 10062) return; // Ignore unknown interaction
      throw error;
    });

    try {
      const query = interaction.options.getString('query');
      
      // Set a timeout for the search operation
      const searchPromise = searchVideos(query, 1);
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Search timeout')), 5000)
      );
      
      const results = await Promise.race([searchPromise, timeoutPromise]);// Ch·ªâ l·∫•y 1 k·∫øt qu·∫£

      if (results.length === 0) {
        return interaction.editReply('‚ùå Kh√¥ng t√¨m th·∫•y video n√†o.');
      }

      const video = results[0];
      const voiceChannel = interaction.member.voice.channel;
      
      if (!voiceChannel) {
        return interaction.editReply('‚ùó B·∫°n ph·∫£i v√†o voice channel tr∆∞·ªõc.');
      }

      await interaction.editReply(`üîé ƒê√£ t√¨m th·∫•y: **${video.title}**`);

      try {
        // Pass the original interaction, isFromSearch flag, and video URL
        await playExecute(interaction, true, video.url);
      } catch (playError) {
        console.error('L·ªói khi ph√°t nh·∫°c:', playError);
        await interaction.followUp({
          content: '‚ùå C√≥ l·ªói x·∫£y ra khi ph√°t nh·∫°c.',
          ephemeral: true
        });
      }    } catch (error) {
      console.error('L·ªói khi t√¨m ki·∫øm:', error);
      
      // Handle specific error cases
      if (error.message === 'Search timeout') {
        return interaction.editReply('‚ùå T√¨m ki·∫øm m·∫•t qu√° nhi·ªÅu th·ªùi gian, vui l√≤ng th·ª≠ l·∫°i.').catch(console.error);
      }
      
      // If interaction is still valid, send error message
      try {
        await interaction.editReply('‚ùå C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm, vui l√≤ng th·ª≠ l·∫°i sau.');
      } catch (replyError) {
        if (replyError.code !== 10062) { // Only log if it's not an unknown interaction
          console.error('Error sending reply:', replyError);
        }
      }
    }
  }
};
